
import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.webhook.aiohttp_server import setup_application
from aiohttp import web

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∏
menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–•–æ—á—É –º–∏–ª–æ–≥–æ –∫–æ—Ç—ë–Ω–∫–∞! üêæ", callback_data="cat")],
    [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="stats")],
    [InlineKeyboardButton(text="–ö–æ—à–∞—á—å–∏ —Å–∫–∞–∑–∫–∏ üåô", callback_data="fairy")],
    [InlineKeyboardButton(text="–ì–∞–ª–µ—Ä–µ—è —É—é—Ç–∞ üè†", callback_data="gallery")],
])

@dp.message(commands=["start", "help"])
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –ö–æ—Ç—ë–Ω–æ–∫! üê± –Ø —Ç–≤–æ–π —É—é—Ç–Ω—ã–π –∫–æ—Ç–∏–∫.
–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:", reply_markup=menu)

@dp.callback_query()
async def callback_handler(callback_query: types.CallbackQuery):
    data = callback_query.data
    if data == "cat":
        await callback_query.message.answer_photo("https://placekitten.com/400/300", caption="–í–æ—Ç —Ç–≤–æ–π –∫–æ—Ç—ë–Ω–æ–∫ üêæ")
    elif data == "stats":
        await callback_query.message.answer("–¢—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞ 3 –∫–æ—Ç—ë–Ω–∫–∞. –†–∞–Ω–≥: –ú–∞–ª–µ–Ω—å–∫–∏–π –∫–æ—Ç—ë–Ω–æ–∫ ‚≠ê")
    elif data == "fairy":
        await callback_query.message.answer("–û–¥–Ω–∞–∂–¥—ã –∫–æ—Ç—ë–Ω–æ–∫ –ª—ë–≥ —Å–ø–∞—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–∫–µ, –ø–æ–ª–Ω–æ–π —Ç—ë–ø–ª–æ–≥–æ –ø–ª–µ–¥–∞... üò¥")
    elif data == "gallery":
        await callback_query.message.answer_photo("https://placekitten.com/401/301", caption="–£—é—Ç–Ω–∞—è –≥–∞–ª–µ—Ä–µ—è –∫–æ—Ç–∏–∫–æ–≤ üß∏")
    await callback_query.answer()

# Webhook —á–∞—Å—Ç—å
async def on_startup(app):
    webhook_url = os.getenv("WEBHOOK_URL")
    await bot.set_webhook(webhook_url)

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

app = web.Application()
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)
app.router.add_routes([web.post("/webhook", lambda request: setup_application(app, dp))])

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(app, port=int(os.getenv("PORT", 8080)))
